pipeline {
    agent any
    triggers {
        githubPush()
    }
    
    environment {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Docker
        DOCKER_IMAGE = "DenisSever/java-app"
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kubernetes
        KUBE_NAMESPACE = "default"
        APP_NAME = "java-app"
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        NOTIFICATION_EMAIL = "denissedih@bk.ru"
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
                echo '‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏–∑ GitHub'
            }
        }
        
        stage('Build Java Application') {
            steps {
                echo 'üî® –°–±–æ—Ä–∫–∞ Java –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...'
                sh 'mvn clean compile'
            }
        }
        
        stage('Run Unit Tests') {
            steps {
                echo 'üß™ –ó–∞–ø—É—Å–∫ Unit-—Ç–µ—Å—Ç–æ–≤...'
                sh 'mvn test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Package Application') {
            steps {
                echo 'üì¶ –°–æ–∑–¥–∞–Ω–∏–µ JAR –ø–∞–∫–µ—Ç–∞...'
                sh 'mvn package -DskipTests'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ –°–æ–∑–¥–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞...'
                script {
                    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ JAR —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    sh 'ls -la target/'
                    dockerImage = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                echo 'üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è Docker –æ–±—Ä–∞–∑–∞...'
                script {
                    // –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –±–µ–∑ credentials
                    sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                    echo "–û–±—Ä–∞–∑ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                echo 'üöÄ –î–µ–ø–ª–æ–π –≤ Kubernetes...'
                sh """
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Kubernetes
                    kubectl cluster-info
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –Ω–∞–ª–∏—á–∏–µ)
                    ls -la k8s/
                    echo 'Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é'
                """
            }
        }
    }
    
    post {
        always {
            echo 'üìä –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω'
        }
        success {
            echo '‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!'
        }
        failure {
            echo '‚ùå –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π'
        }
    }
}
