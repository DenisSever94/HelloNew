pipeline {
    agent any
    triggers {
        githubPush()
    }

    environment {
        DOCKER_IMAGE = "your-dockerhub-username/hellonew-app"
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        KUBE_NAMESPACE = "default"
        APP_NAME = "hellonew-app"
        NOTIFICATION_EMAIL = "denissedih0503@gmail.com"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
                echo '‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏–∑ GitHub'
            }
        }

        stage('Build and Test') {
            steps {
                echo 'üî® –°–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Spring Boot...'
                sh 'mvn clean package'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ –°–æ–∑–¥–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞...'
                script {
                    sh 'ls -la target/'
                    dockerImage = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo 'üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è Docker –æ–±—Ä–∞–∑–∞...'
                script {
                    // –î–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ —Ç–µ–≥–∏—Ä—É–µ–º, –±–µ–∑ push –≤ registry
                    sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                    echo "–û–±—Ä–∞–∑ –≥–æ—Ç–æ–≤: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo 'üöÄ –î–µ–ø–ª–æ–π –≤ Kubernetes...'
                sh """
                    echo '–ü—Ä–∏–º–µ–Ω—è–µ–º Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã:'
                    ls -la k8s/
                    kubectl apply -f k8s/deployment.yaml
                    kubectl apply -f k8s/service.yaml
                    kubectl get pods
                """
            }
        }
    }

    post {
        always {
            echo 'üìä –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω'
        }
        success {
            echo '‚úÖ –£—Å–ø–µ—Ö! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ'
            emailext (
                subject: "SUCCESS: HelloNew App deployed",
                body: "Spring Boot –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ —á–µ—Ä–µ–∑ CI/CD",
                to: "${NOTIFICATION_EMAIL}"
            )
        }
        failure {
            echo '‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ'
        }
    }
}